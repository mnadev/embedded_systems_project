/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_cache.h"

#include "PmodRTCC.h"
#include "PmodTMP3.h"
#include "PmodOLED.h"
#include "PmodBLE.h"
#include "sleep.h"


// BTN declarations
XGpio BTNInst;
#define BTN_INT 			XGPIO_IR_CH1_MASK
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID




// OLED declarations
PmodOLED oled;

// To change between PmodOLED and OnBoardOLED is to change Orientation
const u8 orientation = 0x0; // Set up for Normal PmodOLED(false) vs normal
                            // Onboard OLED(true)
const u8 invert = 0x0; // true = whitebackground/black letters
                       // false = black background /white letters


// RTCC declarations
PmodRTCC rtcc;


// TMP3 declarations
PmodTMP3 temp_sensor;



// BLE declaration
PmodBLE ble;



// static variables
static int status;
static int btn_value;
static int temp_set;
static int temp_current;

static void BTN_Intr_Handler(void *baseaddr_p);

void BTN_Intr_Handler(void *InstancePtr)
{
	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) !=
			BTN_INT) {
			return;
	}
	btn_value= XGpio_DiscreteRead(&BTNInst, 1);
	// Increment counter based on button value
	// Reset if centre button pressed

	if(btn_value % 2 ==0) {
		temp_set -= 1;
	} else {
		temp_set += 1;
	}
    (void)XGpio_InterruptClear(&BTNInst, BTN_INT);
    // Enable GPIO interrupts

    XGpio_InterruptEnable(&BTNInst, BTN_INT);
}


void init_btn() {
	// First initialize the button
	status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Set the button to input
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

	// Enable Interrupts
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTNInst);

}

void DemoInitialize() {
   EnableCaches();
   init_btn();
   OLED_Begin(&myDevice, XPAR_PMODOLED_0_AXI_LITE_GPIO_BASEADDR,
         XPAR_PMODOLED_0_AXI_LITE_SPI_BASEADDR, orientation, invert);
}

/* ------------------------------------------------------------ */
/*** DemoRun()
**
**   Parameters:
**      none
**
**   Return Value:
**      none
**
**   Errors:
**      If the demo is shut down without properly exiting, does not reinitialize
**      properly.
**
**   Description:
**      Displays Demo message and each available Fill Pattern.
**      Pauses between runs to check if user wants to continue, if not, exits.
**      To be safe, exit through prompt before closing demo.
**      Requires UART connection to terminal program on PC.
*/
void DemoRun() {
   int irow, ib, i;
   u8 *pat;
   char c;

   xil_printf("UART and SPI opened for PmodOLED Demo\n\r");

   while (1) {
      xil_printf("entering loop\r\n");
      // Choosing Fill pattern 0
      pat = OLED_GetStdPattern(0);
      OLED_SetFillPattern(&myDevice, pat);

      // Turn automatic updating off
      OLED_SetCharUpdate(&myDevice, 0);

      // Draw a rectangle over writing then slide the rectangle down slowly
      // displaying all writing
      for (irow = 0; irow < OledRowMax; irow++) {
         OLED_ClearBuffer(&myDevice);
         OLED_SetCursor(&myDevice, 0, 0);
         OLED_PutString(&myDevice, "PmodOLED");
         OLED_SetCursor(&myDevice, 0, 1);
         OLED_PutString(&myDevice, "by Digilent");
         OLED_SetCursor(&myDevice, 0, 2);
         OLED_PutString(&myDevice, "Simple Demo");

         OLED_MoveTo(&myDevice, 0, irow);
         OLED_FillRect(&myDevice, 127, 31);
         OLED_MoveTo(&myDevice, 0, irow);
         OLED_LineTo(&myDevice, 127, irow);
         OLED_Update(&myDevice);
         usleep(100000);
      }

      sleep(1);
      // Blink the display three times.
      for (i = 0; i < 3; i++) {
         OLED_DisplayOff(&myDevice);
         usleep(500000);
         OLED_DisplayOn(&myDevice);
         usleep(500000);
      }
      sleep(2);

      // Now erase the characters from the display
      for (irow = OledRowMax - 1; irow >= 0; irow--) {
         OLED_SetDrawColor(&myDevice, 1);
         OLED_SetDrawMode(&myDevice, OledModeSet);
         OLED_MoveTo(&myDevice, 0, irow);
         OLED_LineTo(&myDevice, 127, irow);
         OLED_Update(&myDevice);
         usleep(25000);
         OLED_SetDrawMode(&myDevice, OledModeXor);
         OLED_MoveTo(&myDevice, 0, irow);
         OLED_LineTo(&myDevice, 127, irow);
         OLED_Update(&myDevice);
      }

      sleep(1);

      // Draw a rectangle in center of screen
      // Display the 8 different patterns available
      OLED_SetDrawMode(&myDevice, OledModeSet);

      for (ib = 1; ib < 8; ib++) {
         OLED_ClearBuffer(&myDevice);
         pat = OLED_GetStdPattern(ib);
         OLED_SetFillPattern(&myDevice, pat);
         OLED_MoveTo(&myDevice, 55, 1);
         OLED_FillRect(&myDevice, 75, 27);
         OLED_DrawRect(&myDevice, 75, 27);
         OLED_Update(&myDevice);

         sleep(1);
      }

#ifdef __MICROBLAZE__
      c = 'q';
#else
      xil_printf("(q)uit or any key to continue:\n\r");
      c = inbyte();
#endif

      if (c == 'q' || c == 'Q')
         break;
   }
   xil_printf("Exiting PmodOLED Demo\n\r");
}

void CleanupThermostat() {
   OLED_End(&oled);
   DisableCaches();
}

void EnableCaches() {
	#ifdef __MICROBLAZE__
	#ifdef XPAR_MICROBLAZE_USE_ICACHE
	   Xil_ICacheEnable();
	#endif
	#ifdef XPAR_MICROBLAZE_USE_DCACHE
	   Xil_DCacheEnable();
	#endif
	#endif
}

void DisableCaches() {
	#ifdef __MICROBLAZE__
	#ifdef XPAR_MICROBLAZE_USE_DCACHE
	   Xil_DCacheDisable();
	#endif
	#ifdef XPAR_MICROBLAZE_USE_ICACHE
	   Xil_ICacheDisable();
	#endif
	#endif
}


void init_oled() {}
void init_rtcc() {}
void init_tmp3() {}
void init_ble() {}


int main()
{
    init_platform();


    InitializeThermostat();
    RunThermostat();
    CleanupThermostat();

 	// TODO: Interrupt controller and initialization for button
	if(status != XST_SUCCESS) return XST_FAILURE;
    cleanup_platform();
    return 0;
}
